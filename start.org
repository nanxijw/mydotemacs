#+TITLE: Emacs dot file
#+PROPERTY: header-args    :tangle yes
* 文件头
  - 首先在文件开头声明本文件内代码使用词法作用域
    #+BEGIN_SRC emacs-lisp
      ;;; start.el -*- lexical-binding: t; -*-
    #+END_SRC
  - 以服务器模式启动
    #+BEGIN_SRC emacs-lisp :tangle no
      (server-start)
    #+END_SRC
  - 定义一些后面要用到的变量
    1. 设置 leader key
       #+BEGIN_SRC emacs-lisp
         (setq my-leader-key "M-i")
         (define-prefix-command 'my-leader-key-map)
         (global-set-key (kbd my-leader-key) 'my-leader-key-map)
       #+END_SRC
  - 定义一些后面要用到的函数
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun version> (v1 v2) (version< v2 v1))
      (defun version>= (v1 v2) (version<= v2 v1))
    #+END_SRC
  - 设置custom文件地址，并载入
    #+BEGIN_SRC emacs-lisp
      (setq custom-file (locate-user-emacs-file "custom.el"))
      (when (file-exists-p custom-file)
        (load custom-file))
    #+END_SRC
  - 可执行文件路径
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-to-list 'exec-path (locate-user-emacs-file "bin"))
    #+END_SRC
  - 解决一些命令行工具乱码问题
    #+BEGIN_SRC emacs-lisp :tangle yes
      (modify-coding-system-alist 'process "[cC][mM][dD][pP][rR][oO][xX][yY]" '(utf-8 . gbk-dos))
    #+END_SRC
* 包管理器
  - 设置使用国内镜像
    #+BEGIN_SRC emacs-lisp
      ;; MelpaPackages
      ;; Select the folder to store packages
      ;; Comment / Uncomment to use desired sites
      (setq package-user-dir (expand-file-name "elpa" user-emacs-directory)
            package-archives
            '(
              ;; ("gnu"   . "https://elpa.gnu.org/packages/")
              ;; ("melpa" . "https://melpa.org/packages/")
              ;; ("cselpa" . "https://elpa.thecybershadow.net/packages/")
              ("gnu-tuna"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
              ("melpa-tuna" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
              ;; ("melpa-cn" . "http://mirrors.cloud.tencent.com/elpa/melpa/")
              ;; ("gnu-cn"   . "http://mirrors.cloud.tencent.com/elpa/gnu/")
              ))
      ;; -MelpaPackages

      ;; ConfigurePackageManager
      (unless (bound-and-true-p package--initialized)
        (setq package-enable-at-startup nil)          ; To prevent initializing twice
        (package-initialize))
    #+END_SRC
  - setup.el设置
    #+BEGIN_SRC emacs-lisp
      (eval-and-compile
        (unless (require 'setup nil t)
          (package-install 'setup)
          (require 'setup))

        ;; (defmacro setc (&rest args)
        ;;   "Customize user options using ARGS like `setq'."
        ;;   (declare (debug setq))
        ;;   `(setup (:option ,@args)))

        (setup-define :leader-key
          (lambda (key command)
            `(global-set-key (kbd (concat ,my-leader-key " " ,key)) ,command))
          :documentation "Globally bind LEADER-KEY + KEY to COMMAND."
          :debug '(form sexp)
          :ensure '(kbd func)
          :repeatable t)

        (setup-define :autoload
          (lambda (func)
            (let ((fn (if (memq (car-safe func) '(quote function))
                          (cadr func)
                        func)))
              `(unless (fboundp (quote ,fn))
                 (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
          :documentation "Autoload COMMAND if not already bound."
          :repeatable t
          :signature '(FUNC ...))

        ;; (setup-define :needs
        ;;   (lambda (executable)
        ;;     `(unless (executable-find ,executable)
        ;;        ,(setup-quit)))
        ;;   :documentation "If EXECUTABLE is not in the path, stop here."
        ;;   :repeatable 1)

        (setup-define :load-from
          (lambda (path)
            `(let ((path* (expand-file-name (locate-user-emacs-file ,path))))
               (if (file-exists-p path*)
                   (add-to-list 'load-path path*)
                 ,(setup-quit))))
          :documentation "Add PATH to load path.
        This macro can be used as NAME, and it will replace itself with
        the nondirectory part of PATH.
        If PATH does not exist, abort the evaluation."
          :shorthand (lambda (args)
                       (intern
                        (file-name-nondirectory
                         (directory-file-name (cadr args)))))))
    #+END_SRC
    使用setup后，可以以 ~(macroexpand '(setup body...))~ 的方式查看展开后的代码
* UI界面
  - 隐藏菜单栏、工具栏、滚动条，设置边框宽度
    放到eraly-init.el中去了，这屏蔽
    #+BEGIN_SRC emacs-lisp :tangle no
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
    #+END_SRC
  - 主题设置
    #+BEGIN_SRC emacs-lisp
      (setup (:package srcery-theme)
        (load-theme 'srcery))

      ;; (setup (:package doom-themes)
      ;;   (load-theme 'doom-dark+))

      ;; (setup (:package doom-themes)
      ;;   (load-theme 'doom-zenburn))
    #+END_SRC
  - 开启自动换行，程序标题栏显示当前标记的文件名
    #+BEGIN_SRC emacs-lisp
      (setq-default
       truncate-lines t
       frame-title-format "%b    %Z    %f"
       ) ;; end of setq-default
    #+END_SRC
  - modeline设置
    + 显示行号、列号以及当前文件的总字符数
      #+BEGIN_SRC emacs-lisp
        (line-number-mode +1)
        (column-number-mode +1)
        (size-indication-mode +1)
      #+END_SRC
  - 高亮当前行
    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode +1)
    #+END_SRC
  - 高亮配对的括号
    #+BEGIN_SRC emacs-lisp
      (setq show-paren-when-point-in-periphery t)
      (show-paren-mode +1)
    #+END_SRC
  - 使用isearch搜索时，显示当前匹配项的数量
    #+BEGIN_SRC emacs-lisp
      (setq isearch-lazy-count t
            lazy-count-prefix-format "%s/%s ")
    #+END_SRC
  - whitespace设置
    #+BEGIN_SRC emacs-lisp
      (global-whitespace-mode +1)
      (add-hook 'before-save-hook #'delete-trailing-whitespace)

      ;; Don't use different background for tabs.
      (face-spec-set 'whitespace-tab
                     '((t :background unspecified)))

      ;; Only use background and underline for long lines, so we can still have
      ;; syntax highlight.

      ;; For some reason use face-defface-spec as spec-type doesn't work.  My guess
      ;; is it's due to the variables with the same name as the faces in
      ;; whitespace.el.  Anyway, we have to manually set some attribute to
      ;; unspecified here.
      (face-spec-set 'whitespace-line
                     '((((background light))
                        :background "#d8d8d8" :foreground unspecified
                        :underline t :weight unspecified)
                       (t
                        :background "#404040" :foreground unspecified
                        :underline t :weight unspecified)))

      ;; Use softer visual cue for space before tabs.
      (face-spec-set 'whitespace-space-before-tab
                     '((((background light))
                        :background "#d8d8d8" :foreground "#de4da1")
                       (t
                        :inherit warning
                        :background "#404040" :foreground "#ee6aa7")))

      (setq whitespace-line-column nil
            whitespace-style '(face             ; visualize things below:
                               empty            ; empty lines at beginning/end of buffer
                               ;; lines-tail       ; lines go beyond `fill-column'
                               space-before-tab ; spaces before tab
                               trailing         ; trailing blanks
                               tabs             ; tabs (show by face)
                               tab-mark))       ; tabs (show by symbol)

    #+END_SRC
  - 设置鼠标滚轮一次滚动3行，使得滚动不会那么跳跃
    #+BEGIN_SRC emacs-lisp
      ;; scroll 3 line at a time (less "jumpy" than defaults)
      (setq mouse-wheel-scroll-amount '(3 ((shift) . 1)) ;; 3 line at a time
            mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
            mouse-wheel-follow-mouse 't ;; scroll window under mouse
            scroll-margin 3) ;; scroll-margin 3 靠近屏幕边沿3行时开始滚动，可以很好的看到上下文
    #+END_SRC
  - 字体设置
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; Auto generated by cnfonts
      ;; <https://github.com/tumashu/cnfonts>
      ;; (set-face-attribute
      ;;  'default nil
      ;;  :font (font-spec :name "Cascadia Code"
      ;;                   :weight 'normal
      ;;                   :slant 'normal
      ;;                   :size 12.0))
      ;; (dolist (charset '(kana han symbol cjk-misc bopomofo))
      ;;   (set-fontset-font
      ;;    (frame-parameter nil 'font)
      ;;    charset
      ;;    (font-spec :name "微软雅黑"
      ;;               :weight 'normal
      ;;               :slant 'normal
      ;;               :size 13.5)))
      (set-face-attribute 'default nil
                          :family "LXGW WenKai Mono"
                          :height 135)
    #+END_SRC
* 个人使用习惯方面的设置
  - 粘贴时覆盖选中的region
    #+BEGIN_SRC emacs-lisp
      (delete-selection-mode +1)
    #+END_SRC
  - 不要自动格式化代码
    #+BEGIN_SRC emacs-lisp :tangle no
      (electric-indent-mode -1)
    #+END_SRC
  - 关闭全局eldoc，只在emacs-lisp-mode中打开
    #+BEGIN_SRC emacs-lisp
      (global-eldoc-mode -1)
      (add-hook 'emacs-lisp-mode-hook (lambda () (eldoc-mode +1)))
    #+END_SRC
  - 括号自动补全
    #+BEGIN_SRC emacs-lisp :tangle no
      (electric-pair-mode +1)
    #+END_SRC
  - 不锁定文件
    编辑文件时emacs会自动创建一个 ==.#== 的文件，在windows系统下会导致一些奇怪的问题，这里设置为不创建这个文件
    #+BEGIN_SRC emacs-lisp
      (setq create-lockfiles nil)
    #+END_SRC
  - 需要输入yes的时候，只输入y
    #+BEGIN_SRC emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
  - 因为我平时电脑都不开声音，因此让bell可视化
    #+BEGIN_SRC emacs-lisp
      (setq visible-bell t)
    #+END_SRC
  - 使用ibuffer
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+END_SRC
  - 使用F3查找光标当前所在位置的symbol
    #+BEGIN_SRC emacs-lisp
      (setup (:package symbol-overlay)
        (:global "C-<f3>" symbol-overlay-put
                 "<f3>" symbol-overlay-jump-next
                 "S-<f3>" symbol-overlay-jump-prev
                 "C-S-<f3>" symbol-overlay-remove-all))
    #+END_SRC
    高亮一个symbol后，光标在该symbol上时会自动进入symbol-mode，symbol-overlay-map中快捷键具体如下：
    | i | symbol-overlay-put                | 高亮或取消高亮当前symbol      |
    | n | symbol-overlay-jump-next          | 跳转到下一个位置              |
    | p | symbol-overlay-jump-prev          | 跳转到上一个位置              |
    | w | symbol-overlay-save-symbol        | 复制当前symbol                |
    | t | symbol-overlay-toggle-in-scope    | 切换高亮范围到作用域          |
    | e | symbol-overlay-echo-mark          | 撤销上一次跳转                |
    | d | symbol-overlay-jump-to-definition | 跳转到定义                    |
    | s | symbol-overlay-isearch-literally  | 切换为isearch并搜索当前symbol |
    | q | symbol-overlay-query-replace      | 查找替换当前symbol            |
    | r | symbol-overlay-rename             | 对symbol直接重命名            |
  - 在window间移动
    #+BEGIN_SRC emacs-lisp :tangle no
      (when (eq 'windows-nt system-type)
        (setq w32-lwindow-modifier 'super) ;; 设置win键为super键
        (setq w32-rwindow-modifier 'super) ;; 设置win键为super键
        (global-set-key (kbd "M-s-<left>") 'windmove-left)
        (global-set-key (kbd "M-s-<right>") 'windmove-right)
        (global-set-key (kbd "M-s-<up>") 'windmove-up)
        (global-set-key (kbd "M-s-<down>") 'windmove-down))
    #+END_SRC
  - kill-ring时，若没有选中region，则复制当前行
    #+BEGIN_SRC emacs-lisp
      (defun my-kill-ring-save (beg end &optional region)
        (interactive (list (mark) (point)
                           (prefix-numeric-value current-prefix-arg)))
        (if (region-active-p)
            (kill-ring-save beg end region)
          (progn
            (message "Copied line")
            (kill-ring-save (line-beginning-position) (line-end-position)))))

      (global-set-key [remap kill-ring-save] 'my-kill-ring-save)
    #+END_SRC
  - 剪贴板的一些设置
    #+BEGIN_SRC emacs-lisp
      (setq save-interprogram-paste-before-kill t
            kill-do-not-save-duplicates t
            mouse-yank-at-point t)
    #+END_SRC
  - 记录上次关闭前，光标在文件中的位置
    #+BEGIN_SRC emacs-lisp
      (setq save-place-file (locate-user-emacs-file "tmp/places"))
      (save-place-mode t)
    #+END_SRC
  - 自动读取外部文件对正在编辑的文件的修改
    #+BEGIN_SRC emacs-lisp
      (global-auto-revert-mode +1)
    #+END_SRC
  - 单行内容过长时关闭一些mode
    有时候会打开一些文件，这些文件里的某一行特别长，而Emacs没有针对这种情况做特殊 处理，会导致整个界面卡死。这里启用so-long，当打开一个具有长行的文件时，它会自动检测并将一些可能导致严重性能的mode关闭， 如font-lock (syntax highlight)。
    #+BEGIN_SRC emacs-lisp
      (global-so-long-mode +1)
    #+END_SRC
  - 搜索时大小写敏感
    #+BEGIN_SRC emacs-lisp
      (setq case-fold-search nil)
    #+END_SRC

* org-mode
  - 开启org-babel的sql功能
    #+BEGIN_SRC emacs-lisp
      (setup org
        (setq org-confirm-babel-evaluate nil)
        (:when-loaded
          (add-to-list 'org-babel-load-languages '(sql . t))))

      (setup ob-sql
        (:autoload org-babel-execute:sql))
    #+END_SRC
* Project
  - 使用内置的 project.el
    + 定义project-find-functions
      project-find-functions 是 project.el 中用于查找根目录的函数列表，默认只有 project-try-vc ，这里额外定义了一个 my/project-try-local 。
      该函数使用一些文件作为根目录标识，只要某个文件夹内有 pr-flags 定义的文件，都可以看作项目根目录，并且具有如下优先级顺序：
      1. .projectile ，与 .projectile
      2. 类似常用编程语言的依赖描述文件
      3. Makefile/README 文件
      #+BEGIN_SRC emacs-lisp
      (defun my/project-try-local (dir)
        "Determine if DIR is a non-Git project."
        (catch 'ret
          (let ((pr-flags '((".projectile")
                            ("go.mod" "Cargo.toml" "project.clj" "pom.xml" "package.json") ;; higher priority
                            ("Makefile" "README.org" "README.md"))))
            (dolist (current-level pr-flags)
              (dolist (f current-level)
                (when-let ((root (locate-dominating-file dir f)))
                  (throw 'ret (cons 'local root))))))))

      (setq project-find-functions '(my/project-try-local project-try-vc))
      #+END_SRC
    + 用fd来查找文件
      查找文件是非常高频的操作，可以使用 Rust 编写的 fd 来代替 find，速度更快。配置如下：
      #+BEGIN_SRC emacs-lisp
        (defun my/project-files-in-directory (dir)
          "Use `fd' to list files in DIR."
          (let* ((default-directory dir)
                 (localdir (file-local-name (expand-file-name dir)))
                 (command (format "fd -H -t f -0 . %s" localdir)))
            (project--remote-file-names
             (sort (split-string (shell-command-to-string command) "\0" t)
                   #'string<))))

        (cl-defmethod project-files ((project (head local)) &optional dirs)
          "Override `project-files' to use `fd' in local projects."
          (mapcan #'my/project-files-in-directory
                  (or dirs (list (project-root project)))))
      #+END_SRC
      通过重载 project-files ， M-x project-find-file 时就会用 fd 来搜索文件了。
    + 常用命令说明
      project.el 提供了很多命令来方便在项目中进行操作，这里列举几个常用的：
      1. project-remember-projects-under，增加项目
      2. project-forget-project，删除项目
      3. project-switch-project，切换项目
      4. project-compile，执行项目的 compile 命令
      5. project-search，在项目中搜索指定关键字
      6. project-query-replace-regexp，在项目中执行正则替换
      7. project-shell-command，执行 shell 命令
      8. project-eshell，在根目录打开 eshell
      9. project-dired，在根目录打开 dired
      10. project-find-dir，在项目指定目录打开
      11. diredproject-switch-to-buffer，切换到项目中已经打开的 buffer
    + 扩展命令
      #+BEGIN_SRC emacs-lisp :tangle no
        (defun my/project-info ()
          (interactive)
          (message "%s" (project-current t)))

        (defun my/add-dot-project ()
          (interactive)
          (let* ((root-dir (read-directory-name "Root: "))
                 (f (expand-file-name ".project" root-dir)))
            (message "Create %s..." f)
            (make-empty-file f)))

        (defun my/project-discover ()
          "Add dir under search-path to project."
          (interactive)
          (dolist (search-path '("~/code/" "~/git/"))
            (dolist (file (file-name-all-completions  "" search-path))
              (when (not (member file '("./" "../")))
                (let ((full-name (expand-file-name file search-path)))
                  (when (file-directory-p full-name)
                    (when-let ((pr (project-current nil full-name)))
                      (project-remember-project pr)
                      (message "add project %s..." pr))))))))
      #+END_SRC
  - Projectile
    #+BEGIN_SRC emacs-lisp :tangle no
      (setup (:package projectile)
        (:autoload projectile-project-root))
    #+END_SRC
* 自动补全
  - YASnippet
    YASnippet, a programming template system for Emacs. It loads YASnippet Snippets, a collection of yasnippet snippets for many languages.
    #+BEGIN_SRC emacs-lisp
      (setup (:package yasnippet)
        (setq yas-snippet-dirs (list (expand-file-name (locate-user-emacs-file "etc/snippets"))))
        (:with-mode yas-minor-mode
          (:unbind "TAB" [(tab)])
          (:hook-into prog-mode))

        ;; Created 里面用到了calendar-month-name
        (:with-feature calendar
          (:autoload calendar-month-name)))
    #+END_SRC
  - corfu
    #+BEGIN_SRC emacs-lisp
      (setup (:package corfu)
        (setq corfu-auto t ;; Enable auto completion
              ;; corfu-separator ?_ ;; Set to orderless separator, if not using space
              corfu-quit-at-boundary t ;; Automatically quit at word boundary
              corfu-quit-no-match t ;; Automatically quit if there is no match
              corfu-preview-current nil
              corfu-echo-documentation nil
              corfu-auto-delay 0.2
              corfu-auto-prefix 5)
        (:bind-into corfu-map
          "C-d" corfu-info-documentation
          "C-s" corfu-info-location
          "M-SPC" corfu-insert-separator)
        (:hook-into prog-mode)

        ;; Unbind TAB with corfu-complete，to avoid the conflict with yasnippet
        (:with-map corfu-map
          (:unbind "TAB" [(tab)])))

      (setup (:package cape)
        (add-to-list 'completion-at-point-functions #'cape-dabbrev)
        (add-to-list 'completion-at-point-functions #'cape-abbrev)
        (add-to-list 'completion-at-point-functions #'cape-keyword))
    #+END_SRC
  - abbrev
    #+BEGIN_SRC emacs-lisp
      (setup dabbrev
        ;; Swap M-/ and C-M-/
        (:global "M-/" dabbrev-completion
                 "C-M-/" dabbrev-expand))
    #+END_SRC
* 文件备份
  #+BEGIN_SRC emacs-lisp
    (setq auto-save-list-file-name (locate-user-emacs-file "tmp/autosave-list")
          auto-save-file-name-transforms `((".*" ,(locate-user-emacs-file "tmp/autosaves/") t t)))

    (setq backup-by-copying t) ;; 使用复件备份方式
    (setq backup-directory-alist `((".*" . ,(locate-user-emacs-file "tmp/backups")))) ;; 设置备份路径

    ;; 设置一下备份时的版本控制，这样更加安全。
    (setq version-control     t ;; 启用版本控制，即可以备份多次
          kept-new-versions   32 ;; 保留最新的32个版本
          kept-old-versions   8 ;; 备份最原始的8个版本，即第一次编辑前的文档，和第二次编辑前的文档...
          delete-old-versions t ;; 删除中间版本
          )

    ;; 最近访问文件列表
    (setq recentf-max-saved-items 100)
    (setq recentf-save-file (locate-user-emacs-file "tmp/recentf"))
    #+END_SRC
* 搜索功能
  - 使用color-rg搜索
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setup color-rg
        (:load-from "lisp/color-rg")
        (setq color-rg-max-column 1000)
        (:autoload color-rg-search-project
                   color-rg-read-input
                   color-rg-search-input)

        (:when-loaded
          (defun color-rg-project-root-dir ()
            (let ((dir (projectile-project-root)))
              (if dir dir
                default-directory))))

        ;; (modify-coding-system-alist 'process "rg" '(utf-8 . gbk-dos))

        (defun my-color-rg-search-in-directory ()
          (interactive)
          (let ((directory (read-directory-name "In Directory:"))
                (keyword (color-rg-read-input)))
            (color-rg-search-input keyword (expand-file-name directory))))
        (:leader-key "s f" my-color-rg-search-in-directory
                     "/" color-rg-search-project))
    #+END_SRC
  - deadgrep
    #+begin_src emacs-lisp :tangle no
      (setup (:package deadgrep)
        (global-set-key (kbd "<f5>") #'deadgrep)
        (modify-coding-system-alist 'process "rg" '(utf-8 . gbk-dos)))
    #+end_src
  - vertico
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setup (:package vertico)
        ;; Vertico
        (setq vertico-sort-function #'vertico-sort-alpha)
        (vertico-mode +1))
    #+END_SRC
  - consult
    #+BEGIN_SRC emacs-lisp
      (setup (:package consult)
        (setq consult-project-root-function #'projectile-project-root
              consult-preview-key nil ;; 关闭预览
                 )
        (:global [remap switch-to-buffer] #'consult-buffer
                 [remap goto-line] #'consult-goto-line
                 "C-M-y" consult-yank-pop)
        (:leader-key "s s" consult-line
                     "s j" consult-imenu
                     "f r" consult-recent-file
                     "f d" consult-fd
                     "b b" consult-buffer)

        (:when-loaded
          (recentf-mode +1)
          (defvar consult--fd-command nil)
          (defun consult--fd-builder (input)
            (unless consult--fd-command
              (setq consult--fd-command
                    (if (eq 0 (call-process-shell-command "fdfind"))
                        "fdfind"
                      "fd")))
            (pcase-let* ((`(,arg . ,opts) (consult--command-split input))
                         (`(,re . ,hl) (funcall consult--regexp-compiler
                                                arg 'extended t)))
              (when re
                (list :command (append
                                (list consult--fd-command
                                      "--color=never" "--full-path"
                                      (consult--join-regexps re 'extended))
                                opts)
                      :highlight hl))))

          (defun consult-fd (&optional dir initial)
            (interactive "P")
            (let* ((prompt-dir (consult--directory-prompt "Fd" dir))
                   (default-directory (cdr prompt-dir)))
              (funcall #'find-file (consult--find (car prompt-dir) #'consult--fd-builder initial))))

          ;; 让fd支持gbk
          (modify-coding-system-alist 'process "fd" '(utf-8 . gb18030-dos))))
    #+END_SRC
  - 使用orderless进行过滤和排序补全选项
    #+BEGIN_SRC emacs-lisp
      ;; Optionally use the `orderless' completion style. See
      ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
      ;; dispatcher. Additionally enable `partial-completion' for file path
      ;; expansion. `partial-completion' is important for wildcard support.
      ;; Multiple files can be opened at once with `find-file' if you enter a
      ;; wildcard. You may also give the `initials' completion style a try.
      (setup (:package orderless)
        ;; Configure a custom style dispatcher (see the Consult wiki)
        ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
        ;;       orderless-component-separator #'orderless-escapable-split-on-space)
        (setq completion-styles '(orderless basic)
              completion-category-defaults nil
              completion-category-overrides '((file (styles basic partial-completion)))))
    #+END_SRC
* 编程相关设置
  - 使用4个空格代替tab
    #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4 indent-tabs-mode nil)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (c-set-style "stroustrup")))
    #+END_SRC
** P01
   - 由于历史原因，项目默认使用gbk编码
     #+BEGIN_SRC emacs-lisp :tangle no
       (prefer-coding-system 'chinese-gbk-dos)
     #+END_SRC
   - 使用pike-mode来编辑项目脚本，因为pike-mode隶属于cc-mode包，因此这里使用cc-mode来设置
     #+BEGIN_SRC emacs-lisp :tangle no
       (setup pike-mode
         (:file-match "/server_scripts/.+\\.[ch]$")
         (:hook (lambda ()
                    (set (make-local-variable 'imenu-generic-expression)
                         (list
                          (list nil "^\\<[^()\n]*[^[:alnum:]_:<>~]\\([[:alpha:]_][[:alnum:]_:<>~]*\\)\\([     \n]\\|\\\\\n\\)*(\\([   \n]\\|\\\\\n\\)*\\([^   \n(*][^()]*\\(([^()]*)[^()]*\\)*\\)?)\\([   \n]\\|\\\\\n\\)*[^  \n;(]" 1)))

                    ;; 关闭对多行字符串的支持。该功能严重影响性能
                    (setq c-multiline-string-start-char nil)

                    (define-key pike-mode-map [(f2)] 'p01/id-text-at-point)
                    (define-key pike-mode-map "," nil) ;; 输入“,”时不重新格式化代码
                    (define-key pike-mode-map "(" nil) ;; 输入“(”时不重新格式化代码
                    (define-key pike-mode-map ")" nil) ;; 输入“)”时不重新格式化代码
                    (define-key pike-mode-map ":" nil) ;; 输入“:”时不重新格式化代码
                    (define-key pike-mode-map ";" nil) ;; 输入“;”时不重新格式化代码
                    (define-key pike-mode-map "/" nil) ;; 输入“/”时不重新格式化代码
                    )))
     #+END_SRC
   - 使用conf-mode打开list文件
     #+BEGIN_SRC emacs-lisp :tangle no
       (setup conf-mode
         (:file-match "\\.list$"))
     #+END_SRC
  - citre
    #+BEGIN_SRC emacs-lisp :tangle no
      (setup (:package citre)
        (setq citre-enable-imenu-integration nil
              ;; Set these if readtags/ctags is not in your path.
              citre-readtags-program "/path/to/readtags"
              citre-ctags-program "/path/to/ctags"

              ;; Set this if you use project management plugin like projectile.  It's
              ;; used for things like displaying paths relatively, see its docstring.
              citre-project-root-function #'projectile-project-root

              ;; Set this if you want to always use one location to create a tags file.
              ;; citre-default-create-tags-file-location 'global-cache

              ;; See the "Create tags file" section above to know these options
              citre-use-project-root-when-creating-tags t

              ;; citre-prompt-language-for-ctags-command t
              ;; By default, when you open any file, and a tags file can be found for it,
              ;; `citre-mode' is automatically enabled.  If you only want this to work for
              ;; certain modes (like `prog-mode'), set it like this.
              citre-auto-enable-citre-mode-modes '(prog-mode)

              citre-enable-capf-integration t
              citre-capf-optimize-for-popup t)

        ;; Bind your frequently used commands.  Alternatively, you can define them
        ;; in `citre-mode-map' so you can only use them when `citre-mode' is enabled.
        (:global "M-." citre-jump
                 "M-," citre-jump-back)
        (:leader-key
         "t j" citre-jump
         "t J" citre-jump-back
         "t u" citre-update-this-tags-file
         "t p" citre-peek))
    #+END_SRC
    ctags 命令
    #+BEGIN_SRC text :tangle no
      ctags
      -o
      %TAGFILE%
      --languages=c++
      --kinds-c++=df
      --langmap=c++:.c.h
      -h .h.c
      --fields=*
      --extras=*
      --input-encoding=GBK
      --exclude=xgs/*
      -R
    #+END_SRC
* 临时实验配置
  - embark
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; (setup (:package marginalia)
      ;;   (require 'marginalia
      ;;   (marginalia-mode)))

      (setup (:package embark)
        (:global "C-." embark-act
                 "C-;" embark-dwim
                 "C-h B" embark-bindings ;; alternative for `describe-bindings'
                 )

        ;; Optionally replace the key help with a completing-read interface
        (setq prefix-help-command #'embark-prefix-help-command)

        ;; Hide the mode line of the Embark live/completions buffers
        (add-to-list 'display-buffer-alist
                     '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                       nil
                       (window-parameters (mode-line-format . none)))))
    #+END_SRC
  - eglot
    #+BEGIN_SRC emacs-lisp :tangle no
      (setup (:package eglot))
      ;;(add-to-list 'eglot-server-programs `(rust-mode . ("rust-analyzer" :initializationOptions (:cargo (:features "all")))))
      (setup (:package rust-mode)
        (:hook eglot-ensure))
    #+END_SRC
* 快捷键设置
  - 取消一些我不用的快捷键
    1. 禁用以下快捷键，防止误按导致emacs被关闭、隐藏
       #+BEGIN_SRC emacs-lisp
         (global-unset-key (kbd "C-x C-c"))
         (global-set-key (kbd "C-z") nil)
       #+END_SRC
    2. 取消输入法快捷键
       #+BEGIN_SRC emacs-lisp
         ;; unset the key of 'toggle-input-method'
         (global-unset-key (kbd "C-\\"))
       #+END_SRC
  - window切换
    #+BEGIN_SRC emacs-lisp
      (global-set-key [C-tab] 'other-window)
    #+END_SRC
* 性能优化
  - 使用gcmh来管理gc
    #+BEGIN_SRC emacs-lisp
      (setup gcmh
        (:package gcmh)
        (setq gcmh-high-cons-threshold 16777216) ; 16mb, or 32mb, or 64mb, or *maybe* 128mb, BUT NOT 512mb
        (:when-loaded
          (setf (alist-get 'gcmh-mode minor-mode-alist) '("")))
        (add-hook 'after-init-hook 'gcmh-mode))
    #+END_SRC
