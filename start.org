#+TITLE: Emacs dot file
#+PROPERTY: header-args    :tangle yes

* 文件头
  - 首先在文件开头声明本文件内代码使用词法作用域
    #+begin_src emacs-lisp
      ;;; start.el -*- lexical-binding: t; -*-
    #+end_src
  - 以服务器模式启动
    #+begin_src emacs-lisp
    (server-start)
    #+end_src
  - 定义一些后面要用到的变量
    1. 定义leader-key
       #+BEGIN_SRC emacs-lisp
         (define-prefix-command 'my-leader-key)
         (global-set-key (kbd "M-i") 'my-leader-key)
       #+END_SRC
  - 定义一些后面要用到的函数
    #+begin_src emacs-lisp
      (defun version> (v1 v2) (version< v2 v1))
      (defun version>= (v1 v2) (version<= v2 v1))
    #+end_src
  - 设置custom文件地址，并载入
    #+begin_src emacs-lisp
      (setq custom-file (locate-user-emacs-file "custom.el"))
      (when (file-exists-p custom-file)
        (load custom-file))
    #+end_src
  - 可执行文件路径
    #+begin_src emacs-lisp
      ;; (setq exec-path (add-to-list 'exec-path "C:/link"))
    #+end_src
  - 解决一些命令行工具乱码问题
    #+begin_src emacs-lisp
      (modify-coding-system-alist 'process "[cC][mM][dD][pP][rR][oO][xX][yY]" '(utf-8 . gbk-dos))
    #+end_src
* 包管理器初始化
  - 设置使用国内镜像
    #+BEGIN_SRC emacs-lisp
      ;; (when (version<= emacs-version "27")
      (require 'package)
      (setq package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
                               ("melpa" . "https://melpa.org/packages/")))
      (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                               ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
      (setq package-archives '(("gnu"   . "https://mirrors.cloud.tencent.com/elpa/gnu/")
                               ("melpa" . "https://mirrors.cloud.tencent.com/elpa/melpa/")))
      (setq package-archives '(("gnu"   . "https://elpa.emacs-china.org/gnu/")
                               ("melpa" . "https://elpa.emacs-china.org/melpa/")))
      (package-initialize)
      ;; )
    #+END_SRC
  - 先安装use-package
    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

      ;; Should set before loading `use-package'
      (eval-and-compile
        (setq use-package-always-ensure t)
        (setq use-package-always-defer t)
        (setq use-package-expand-minimally t)
        (setq use-package-enable-imenu-support t))

      (eval-when-compile
        (require 'use-package))

      ;; Required by `use-package'
      (use-package diminish)
      (use-package bind-key)
    #+END_SRC
* UI界面
  - 隐藏菜单栏、工具栏、滚动条，设置边框宽度
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
    #+END_SRC
  - 使用solarized-dark主题
    #+BEGIN_SRC emacs-lisp
      ;; (use-package solarized-theme
      ;;   :init (load-theme 'solarized-dark))

      ;; (use-package srcery-theme
      ;;   :init (load-theme 'srcery))

      ;; (use-package fantom-theme
      ;;   :init (load-theme 'fantom))

      (use-package dracula-theme
        :init (load-theme 'dracula))
    #+END_SRC
  - 开启自动换行，程序标题栏显示当前标记的文件名
    #+BEGIN_SRC emacs-lisp
      (setq-default
       truncate-lines t
       frame-title-format "%b    %f"
       ) ;; end of setq-default
    #+END_SRC
  - 在modeline里显示行号、列号以及当前文件的总字符数
    #+BEGIN_SRC emacs-lisp
      (use-package simple
        :ensure nil
        :hook (after-init . (lambda ()
                              (line-number-mode)
                              (column-number-mode)
                              (size-indication-mode))))
    #+END_SRC
  - 高亮当前行
    #+BEGIN_SRC emacs-lisp
      (use-package hl-line
        :ensure nil
        :hook (after-init . global-hl-line-mode))
    #+END_SRC
  - 高亮配对的括号
    #+begin_src emacs-lisp
      (use-package paren
        :ensure nil
        :hook (after-init . show-paren-mode)
        :config
        (setq show-paren-when-point-in-periphery t))

    #+end_src
  - 使用isearch搜索时，显示当前匹配项的数量
    #+BEGIN_SRC emacs-lisp
    (setq isearch-lazy-count t
        lazy-count-prefix-format "%s/%s ")
    #+END_SRC
  - whitespace设置
    #+BEGIN_SRC emacs-lisp
      (use-package whitespace
        :ensure nil
        :hook
        ((after-init . global-whitespace-mode)
         (before-save . delete-trailing-whitespace))
        :config
        ;; Don't use different background for tabs.
        (face-spec-set 'whitespace-tab
                       '((t :background unspecified)))
        ;; Only use background and underline for long lines, so we can still have
        ;; syntax highlight.

        ;; For some reason use face-defface-spec as spec-type doesn't work.  My guess
        ;; is it's due to the variables with the same name as the faces in
        ;; whitespace.el.  Anyway, we have to manually set some attribute to
        ;; unspecified here.
        (face-spec-set 'whitespace-line
                       '((((background light))
                          :background "#d8d8d8" :foreground unspecified
                          :underline t :weight unspecified)
                         (t
                          :background "#404040" :foreground unspecified
                          :underline t :weight unspecified)))

        ;; Use softer visual cue for space before tabs.
        (face-spec-set 'whitespace-space-before-tab
                       '((((background light))
                          :background "#d8d8d8" :foreground "#de4da1")
                         (t
                          :inherit warning
                          :background "#404040" :foreground "#ee6aa7")))

        (setq
         whitespace-line-column nil
         whitespace-style
         '(face             ; visualize things below:
           empty            ; empty lines at beginning/end of buffer
           ;; lines-tail       ; lines go beyond `fill-column'
           space-before-tab ; spaces before tab
           trailing         ; trailing blanks
           tabs             ; tabs (show by face)
           tab-mark         ; tabs (show by symbol)
           )))
    #+END_SRC
  - 设置鼠标滚轮一次滚动3行，使得滚动不会那么跳跃
    #+BEGIN_SRC emacs-lisp
      ;; scroll 3 line at a time (less "jumpy" than defaults)
      (setq mouse-wheel-scroll-amount '(3 ((shift) . 1))) ;; 3 line at a time
      (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
      (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
      ;; scroll-margin 3 靠近屏幕边沿3行时开始滚动，可以很好的看到上下文
      (setq scroll-margin 3)
    #+END_SRC
  - 字体设置
    #+BEGIN_SRC emacs-lisp :tangle no
      (set-face-attribute
       'default nil
       :font (font-spec :name "-outline-Consolas-bold-normal-normal-mono-*-*-*-*-c-*-iso10646-1"
                        :weight 'normal
                        :slant 'normal
                        :size 12.5))
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font
         (frame-parameter nil 'font)
         charset
         (font-spec :name "-outline-微软雅黑-normal-normal-normal-sans-*-*-*-*-p-*-iso10646-1"
                    :weight 'normal
                    :slant 'normal
                    :size 13.5)))

    #+END_SRC
* 个人使用习惯方面的设置
  - 粘贴时覆盖选中的region
    #+BEGIN_SRC emacs-lisp
      (delete-selection-mode t)
    #+END_SRC
  - 编辑文件时emacs会自动创建一个 ==.#== 的文件，在windows系统下会导致一些奇怪的问题，这里设置为不创建这个文件
    #+BEGIN_SRC emacs-lisp
      (setq create-lockfiles nil)
    #+END_SRC
  - 需要输入yes的时候，只输入y
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
  - 因为我平时电脑都不开声音，因此让bell可视化
    #+begin_src emacs-lisp
      (setq visible-bell t)
    #+end_src
  - 使用ibuffer
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+END_SRC
  - 使用F3查找光标当前所在位置的symbol
    #+begin_src emacs-lisp
      (use-package symbol-overlay
        :defer t
        :bind (("C-<f3>" . symbol-overlay-put)
               ("<f3>" . symbol-overlay-jump-next)
               ("S-<f3>" . symbol-overlay-jump-prev)
               ("C-S-<f3>" . symbol-overlay-remove-all)))
    #+end_src
    高亮一个symbol后，光标在该symbol上时会自动进入symbol-mode，symbol-overlay-map中快捷键具体如下：
    | i | symbol-overlay-put                | 高亮或取消高亮当前symbol      |
    | n | symbol-overlay-jump-next          | 跳转到下一个位置              |
    | p | symbol-overlay-jump-prev          | 跳转到上一个位置              |
    | w | symbol-overlay-save-symbol        | 复制当前symbol                |
    | t | symbol-overlay-toggle-in-scope    | 切换高亮范围到作用域          |
    | e | symbol-overlay-echo-mark          | 撤销上一次跳转                |
    | d | symbol-overlay-jump-to-definition | 跳转到定义                    |
    | s | symbol-overlay-isearch-literally  | 切换为isearch并搜索当前symbol |
    | q | symbol-overlay-query-replace      | 查找替换当前symbol            |
    | r | symbol-overlay-rename             | 对symbol直接重命名            |
  - 在window间移动
    #+BEGIN_SRC emacs-lisp
      (when (eq 'windows-nt system-type)
        (setq w32-lwindow-modifier 'super) ;; 设置win键为super键
        (setq w32-rwindow-modifier 'super) ;; 设置win键为super键
        (global-set-key (kbd "M-s-<left>") 'windmove-left)
        (global-set-key (kbd "M-s-<right>") 'windmove-right)
        (global-set-key (kbd "M-s-<up>") 'windmove-up)
        (global-set-key (kbd "M-s-<down>") 'windmove-down))
    #+END_SRC
  - kill-ring时，若没有选中region，则复制当前行
    #+BEGIN_SRC emacs-lisp
      (define-advice kill-ring-save (:around (func &rest args))
        (if mark-active (apply func args)
          (message "Copied line")
          (apply func (list (line-beginning-position) (line-end-position)))))
    #+END_SRC
  - 记录上次关闭前，光标在文件中的位置
    #+BEGIN_SRC emacs-lisp
      (use-package saveplace
        :ensure nil
        :config
        (setq save-place-file (locate-user-emacs-file "tmp/places"))
        :hook (after-init . save-place-mode))
    #+END_SRC
  - 自动读取外部文件对本文件的修改
    #+BEGIN_SRC emacs-lisp
      (use-package autorevert
        :ensure nil
        :hook (after-init . global-auto-revert-mode))
    #+END_SRC
  - 有时候会打开一些文件，这些文件里的某一行特别长，而Emacs没有针对这种情况做特殊 处理，会导致整个界面卡死。这里启用so-long，当打开一个具有长行的文件时，它会自动检测并将一些可能导致严重性能的mode关闭， 如font-lock (syntax highlight)。
    #+BEGIN_SRC emacs-lisp
      (use-package so-long
        :ensure nil
        :hook (after-init . global-so-long-mode))
    #+END_SRC
* projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :commands (projectile-project-root))
  #+END_SRC
* 自动补全
  - company
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :hook (after-init . global-company-mode)
        :config
        (setq company-tooltip-align-annotations t
              company-tooltip-limit 12
              company-idle-delay 0.1
              company-echo-delay (if (display-graphic-p) nil 0)
              company-minimum-prefix-length 2
              company-require-match nil
              company-dabbrev-ignore-case nil
              company-dabbrev-downcase nil
              company-dabbrev-code-ignore-case t)

        (setq company-backends '((company-keywords company-dabbrev-code)))

        :bind
        (:map company-active-map
              ("<tab>" . company-complete-selection)
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous)))
    #+END_SRC
  - yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :commands (yas-global-mode yas-minor-mode yas-activate-extra-mode)
        :init
        (setq yas-snippet-dirs (list (expand-file-name (locate-user-emacs-file "etc/snippets"))))
        :hook (after-init . (lambda () (yas-global-mode 1))))
    #+END_SRC
* 文件备份
  #+BEGIN_SRC emacs-lisp
    (setq auto-save-file-name-transforms `((".*" ,(locate-user-emacs-file "tmp/autosaves\\1") t)))
    (setq auto-save-list-file-name (locate-user-emacs-file "tmp/autosave-list"))

    (setq backup-by-copying t) ;; 使用复件备份方式
    (setq backup-directory-alist `((".*" . ,(locate-user-emacs-file "tmp/backups")))) ;; 设置备份路径

    ;; 设置一下备份时的版本控制，这样更加安全。
    (setq version-control     t ;; 启用版本控制，即可以备份多次
      kept-new-versions   6 ;; 保留最新的6个版本
      kept-old-versions   2 ;; 备份最原始的两个版本，即第一次编辑前的文档，和第二次编辑前的文档
      delete-old-versions t ;; 删除中间版本
      )

    ;; 最近访问文件列表
    (setq recentf-max-saved-items 100)
    (setq recentf-save-file (locate-user-emacs-file "tmp/recentf"))
    (recentf-mode +1)
    #+END_SRC
* 搜索功能
  - 使用color-rg搜索
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package color-rg
        :demand t
        :load-path "lisp/color-rg"
        :init
        ;; 解决rg搜索中文乱码
        (modify-coding-system-alist 'process "rg" '(utf-8 . gbk-dos))

        (defun my-color-rg-search-in-directory ()
          (interactive)
          (let ((directory (read-directory-name "In Directory:"))
                (keyword (color-rg-read-input)))
            (color-rg-search-input keyword (expand-file-name directory))))
        :bind (("M-i s f" . 'my-color-rg-search-in-directory)
               ("M-i /" . 'color-rg-search-project)))
    #+END_SRC
  - selectrum
    #+BEGIN_SRC emacs-lisp
      (use-package selectrum
        :init
        (selectrum-mode +1)
        (setq completion-styles '(substring partial-completion)))
    #+END_SRC
  - consult
    #+BEGIN_SRC emacs-lisp
      (use-package consult
        :custom
        (consult-project-root-function #'projectile-project-root)
        (consult-preview-key nil) ;; 关闭预览
        :config
        (defun my/consult-recent-file ()
          (interactive)
          (recentf-mode +1)
          (consult-recent-file))

        (defun consult-find-fd (&optional dir initial)
          (interactive "P")
          (let ((consult-find-command "fd --color=never --full-path ARG OPTS"))
            (consult-find dir initial)))

        ;; 让fd支持gbk
        (modify-coding-system-alist 'process "fd" '(utf-8 . gbk-dos))

        :bind (("C-x b" . consult-buffer)
               ("C-c C-s" . consult-line)
               ("M-i s j" . consult-imenu)
               ("M-i f r" . consult-recent-file)
               ("M-i f d" . consult-find-fd)))
    #+END_SRC

* 编程相关设置
  - 使用4个空格代替tab
    #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4 indent-tabs-mode nil)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (c-set-style "stroustrup")))
    #+END_SRC
** lsp-mode
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package lsp-mode)
   #+END_SRC
** P01
   - 由于历史原因，项目默认使用gbk编码
     #+BEGIN_SRC emacs-lisp
       (prefer-coding-system 'chinese-gbk-dos)
     #+END_SRC
   - 使用pike-mode来编辑项目脚本，因为pike-mode隶属于cc-mode包，因此这里使用cc-mode来设置
     #+BEGIN_SRC emacs-lisp
       (setq auto-mode-alist (append (list (cons "/server_scripts/.+\\.[ch]$" 'pike-mode)) auto-mode-alist))
       (add-hook 'pike-mode-hook
                 '(lambda ()
                    (set (make-local-variable 'imenu-generic-expression)
                         (list
                          (list nil "^\\<[^()\n]*[^[:alnum:]_:<>~]\\([[:alpha:]_][[:alnum:]_:<>~]*\\)\\([     \n]\\|\\\\\n\\)*(\\([   \n]\\|\\\\\n\\)*\\([^   \n(*][^()]*\\(([^()]*)[^()]*\\)*\\)?)\\([   \n]\\|\\\\\n\\)*[^  \n;(]" 1)))

                    (define-key pike-mode-map [(f2)]
                      'p01/id-text-at-point)))
     #+END_SRC
   - 使用conf-mode打开list文件
     #+BEGIN_SRC emacs-lisp
       (use-package conf-mode
         :defer t
         :ensure nil
         :mode "\\.list$")
     #+END_SRC
** rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :hook ((rust-mode . my/rust-lsp))
       :config
       (setq rust-format-on-save t)
       (defun my/rust-lsp ()
         (setq-local lsp-completion-enable nil
                     compile-command "cargo build")))
   #+END_SRC
* 性能优化
  - 设置垃圾回收出发阈值为128M，并且空闲超过15秒时进行垃圾回收
    #+begin_src emacs-lisp
      (setq gc-cons-threshold 134217728)
      (defvar k-gc-timer (run-with-idle-timer 15 t 'garbage-collect))
    #+end_src
* 临时实验配置
  - multiple-cursors
    #+BEGIN_SRC emacs-lisp
      (use-package multiple-cursors
        :bind
        (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-S-c C-S-c". mc/edit-lines)))
    #+END_SRC
  - expand-region
    #+begin_src emacs-lisp :tangle no
      (use-package expand-region
        :bind
        (([M-S-right] 'er/expand-region)))
    #+end_src
